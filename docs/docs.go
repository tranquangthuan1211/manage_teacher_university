// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Tran Quang Thuan",
            "url": "https://shub.vn",
            "email": "tranthuan.121104@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/achievements": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of achievements by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Achievements"
                ],
                "summary": "Get a list of achievements [OK]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.AchievementResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Achievements"
                ],
                "summary": "Post a achievement to database [OK]",
                "parameters": [
                    {
                        "description": "New achievement data",
                        "name": "Achievement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.AchievementInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/achievements/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a achievement if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Achievements"
                ],
                "summary": "Get a achievement [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Achievement id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.AchievementResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Achievements"
                ],
                "summary": "Delete a achievement [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Achievement id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Achievements"
                ],
                "summary": "Update a achievement [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Achievement id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Achievement data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "Achievement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.AchievementUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/activities": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of activities by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Activities"
                ],
                "summary": "Get a list of activities [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Semester Filter",
                        "name": "semester",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Scholl Year Filter",
                        "name": "school_year_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Confirm Filter",
                        "name": "confirm",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Deleted Filter",
                        "name": "deleted",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.ActivityResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Activities"
                ],
                "summary": "Post a activity to database [OK]",
                "parameters": [
                    {
                        "description": "New activity data",
                        "name": "Activity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.ActivityInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/activities/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a activity if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Activities"
                ],
                "summary": "Get a activity [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Activity id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.ActivityResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Activities"
                ],
                "summary": "Delete a activity [OK]",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Delete permanently",
                        "name": "permanently",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Activity id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Activities"
                ],
                "summary": "Update a activity [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Activity id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Activity data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "Activity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.ActivityUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/activities/{id}/confirm": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return an activity if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Activities"
                ],
                "summary": "Confirm an activity [OK]",
                "parameters": [
                    {
                        "description": "Confirm data",
                        "name": "Activity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.ActivityConfirmData"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Activity id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.ActivityResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/activities/{id}/restore": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Activities"
                ],
                "summary": "Update a activity [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Activity id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/activity_import_deadlines": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of activity_import_deadlines if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActivityImportDeadlines"
                ],
                "summary": "Post activity_import_deadlines to database [OK]",
                "parameters": [
                    {
                        "description": "New activity_import_deadlines data",
                        "name": "ActivityImportDeadline",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.ActivityImportDeadlineInsertData"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted data",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.ActivityImportDeadlineInsertData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/activity_import_deadlines/{school_year_id}/{semester}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a activity_import_deadline if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActivityImportDeadlines"
                ],
                "summary": "Get a activity_import_deadline [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Semester",
                        "name": "semester",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "SchoolYearId",
                        "name": "school_year_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.ActivityImportDeadlineResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActivityImportDeadlines"
                ],
                "summary": "Delete a activity_import_deadline [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Semester",
                        "name": "semester",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "SchoolYearId",
                        "name": "school_year_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActivityImportDeadlines"
                ],
                "summary": "Update a activity_import_deadline [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Semester",
                        "name": "semester",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "SchoolYearId",
                        "name": "school_year_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ActivityImportDeadline data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "ActivityImportDeadline",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.ActivityImportDeadlineUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/awards": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of awards by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Awards"
                ],
                "summary": "Get a list of awards [OK]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.AwardResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Awards"
                ],
                "summary": "Post a award to database [OK]",
                "parameters": [
                    {
                        "description": "New award data",
                        "name": "Award",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.AwardInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/awards/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a award if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Awards"
                ],
                "summary": "Get a award [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Award id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.AwardResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Awards"
                ],
                "summary": "Delete a award [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Award id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Awards"
                ],
                "summary": "Update a award [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Award id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Award data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "Award",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.AwardUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of categories by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Get a list of categories [OK]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.CategoryResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Post a category to database [OK]",
                "parameters": [
                    {
                        "description": "New category data",
                        "name": "Category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.CategoryInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/categories/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a category if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Get a category [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.CategoryResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Delete a category [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Update a category [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Category data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "Category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.CategoryUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/category_groups": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of category_groups by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CategoryGroups"
                ],
                "summary": "Get a list of category_groups [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Semester Filter",
                        "name": "semester",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Scholl Year Filter",
                        "name": "school_year_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.CategoryGroupResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CategoryGroups"
                ],
                "summary": "Post a category_group to database [OK]",
                "parameters": [
                    {
                        "description": "New category_group data",
                        "name": "CategoryGroup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.CategoryGroupInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/category_groups/copy": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CategoryGroups"
                ],
                "summary": "Copy point_frame, category_group, category [OK]",
                "parameters": [
                    {
                        "description": "Copy data",
                        "name": "CategoryGroup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.CategoryGroupCopyData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "$ref": "#/definitions/database.CategoryGroupCopyResData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/category_groups/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CategoryGroups"
                ],
                "summary": "Delete a category_group [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CategoryGroup id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CategoryGroups"
                ],
                "summary": "Update a category_group [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CategoryGroup id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CategoryGroup data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "CategoryGroup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.CategoryGroupUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/certificates": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of certificates by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificates"
                ],
                "summary": "Get a list of certificates [OK]",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Deleted Filter",
                        "name": "deleted",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Deleted Filter",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.CertificateResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificates"
                ],
                "summary": "Post a certificate to database [OK]",
                "parameters": [
                    {
                        "description": "New certificate data",
                        "name": "Certificate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.CertificateInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "$ref": "#/definitions/database.CertificateResData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/certificates/many": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificates"
                ],
                "summary": "Post a certificate to database [OK]",
                "parameters": [
                    {
                        "description": "New certificate data",
                        "name": "Certificate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.CertificateInsertData"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "$ref": "#/definitions/database.CertificateResData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/certificates/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a certificate if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificates"
                ],
                "summary": "Get a certificate [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Certificate id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.CertificateResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificates"
                ],
                "summary": "Delete a certificate [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Certificate id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Deletion Reason",
                        "name": "DeletionReason",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.DeletionReason"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificates"
                ],
                "summary": "Update a certificate [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Certificate id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Certificate data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "Certificate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.CertificateUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/certificates/{id}/restore": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificates"
                ],
                "summary": "Restore a certificate [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Certificates id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/complain_responses": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of complain_responses by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ComplainResponses"
                ],
                "summary": "Get a list of complain_responses [OK]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.ComplainResponseResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ComplainResponses"
                ],
                "summary": "Post a complain_response to database [OK]",
                "parameters": [
                    {
                        "description": "New complain_response data",
                        "name": "ComplainResponse",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.ComplainResponseInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/complain_responses/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a complain_response if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ComplainResponses"
                ],
                "summary": "Get a complain_response [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ComplainResponse id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.ComplainResponseResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ComplainResponses"
                ],
                "summary": "Delete a complain_response [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ComplainResponse id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ComplainResponses"
                ],
                "summary": "Update a complain_response [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ComplainResponse id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ComplainResponse data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "ComplainResponse",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.ComplainResponseUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/complain_times": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of complain_times by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ComplainTimes"
                ],
                "summary": "Get a list of complain_times [OK]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.ComplainTimeResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ComplainTimes"
                ],
                "summary": "Post a complain_time to database [OK]",
                "parameters": [
                    {
                        "description": "New complain_time data",
                        "name": "ComplainTime",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.ComplainTimeInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/complain_times/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a complain_time if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ComplainTimes"
                ],
                "summary": "Get a complain_time [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ComplainTime id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.ComplainTimeResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ComplainTimes"
                ],
                "summary": "Delete a complain_time [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ComplainTime id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ComplainTimes"
                ],
                "summary": "Update a complain_time [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ComplainTime id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ComplainTime data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "ComplainTime",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.ComplainTimeUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/complains": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of complains by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Complains"
                ],
                "summary": "Get a list of complains [OK]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.ComplainResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Complains"
                ],
                "summary": "Post a complain to database [OK]",
                "parameters": [
                    {
                        "description": "New complain data",
                        "name": "Complain",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.ComplainInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/complains/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a complain if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Complains"
                ],
                "summary": "Get a complain [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Complain id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.ComplainResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Complains"
                ],
                "summary": "Delete a complain [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Complain id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Complains"
                ],
                "summary": "Update a complain [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Complain id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Complain data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "Complain",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.ComplainUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/majors": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of majors by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Majors"
                ],
                "summary": "Get a list of majors [OK]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.MajorResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Majors"
                ],
                "summary": "Post a major to database [OK]",
                "parameters": [
                    {
                        "description": "New major data",
                        "name": "Major",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.MajorInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/majors/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a major if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Majors"
                ],
                "summary": "Get a major [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Major id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.MajorResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Majors"
                ],
                "summary": "Delete a major [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Major id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Majors"
                ],
                "summary": "Update a major [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Major id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Major data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "Major",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.MajorUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/organizations": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of organizations by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Get a list of organizations [OK]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.OrganizationResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Post a organization to database [OK]",
                "parameters": [
                    {
                        "description": "New organization data",
                        "name": "Organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.OrganizationInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/organizations/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a organization if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Get a organization [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.OrganizationResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Delete a organization [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Update a organization [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Organization data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "Organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.OrganizationUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/point_frames": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of point_frames by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PointFrames"
                ],
                "summary": "Get a list of point_frames [OK]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.PointFrameResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PointFrames"
                ],
                "summary": "Post a point_frame to database [OK]",
                "parameters": [
                    {
                        "description": "New point_frame data",
                        "name": "PointFrame",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.PointFrameInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/point_frames/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PointFrames"
                ],
                "summary": "Delete a point_frame [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PointFrame id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PointFrames"
                ],
                "summary": "Update a point_frame [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PointFrame id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "PointFrame data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "PointFrame",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.PointFrameUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/ratings": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of ratings by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ratings"
                ],
                "summary": "Get a list of ratings [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Semester Filter",
                        "name": "semester",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Scholl Year Filter",
                        "name": "school_year_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.RatingResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ratings"
                ],
                "summary": "Post a rating to database [OK]",
                "parameters": [
                    {
                        "description": "New rating data",
                        "name": "Rating",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.RatingInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/ratings/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ratings"
                ],
                "summary": "Delete a rating [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rating id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ratings"
                ],
                "summary": "Update a rating [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rating id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rating data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "Rating",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.RatingUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of roles by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Get a list of roles [OK]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.RoleResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Post a role to database [OK]",
                "parameters": [
                    {
                        "description": "New role data",
                        "name": "Role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.RoleInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/roles/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a role if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Get a role [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.RoleResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Delete a role [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Update a role [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "Role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.RoleUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/sample_complain_responses": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of sample_complain_responses by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SampleComplainResponses"
                ],
                "summary": "Get a list of sample_complain_responses [OK]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.SampleComplainResponseResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SampleComplainResponses"
                ],
                "summary": "Post a sample_complain_response to database [OK]",
                "parameters": [
                    {
                        "description": "New sample_complain_response data",
                        "name": "SampleComplainResponse",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.SampleComplainResponseInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/sample_complain_responses/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a sample_complain_response if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SampleComplainResponses"
                ],
                "summary": "Get a sample_complain_response [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SampleComplainResponse id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.SampleComplainResponseResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SampleComplainResponses"
                ],
                "summary": "Delete a sample_complain_response [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SampleComplainResponse id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SampleComplainResponses"
                ],
                "summary": "Update a sample_complain_response [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SampleComplainResponse id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "SampleComplainResponse data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "SampleComplainResponse",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.SampleComplainResponseUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/school_years": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of school_years by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SchoolYears"
                ],
                "summary": "Get a list of school_years [OK]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.SchoolYearResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SchoolYears"
                ],
                "summary": "Post a school_year to database [OK]",
                "parameters": [
                    {
                        "description": "New school_year data",
                        "name": "SchoolYear",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.SchoolYearInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/school_years/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a school_year if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SchoolYears"
                ],
                "summary": "Get a school_year [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SchoolYear id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.SchoolYearResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SchoolYears"
                ],
                "summary": "Delete a school_year [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SchoolYear id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SchoolYears"
                ],
                "summary": "Update a school_year [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SchoolYear id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "SchoolYear data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "SchoolYear",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.SchoolYearUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/signs": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of signs by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Signs"
                ],
                "summary": "Get a list of signs [OK]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.SignResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Signs"
                ],
                "summary": "Post a sign to database [OK]",
                "parameters": [
                    {
                        "description": "New sign data",
                        "name": "Sign",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.SignInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/signs/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a sign if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Signs"
                ],
                "summary": "Get a sign [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sign id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.SignResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Signs"
                ],
                "summary": "Delete a sign [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sign id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Signs"
                ],
                "summary": "Update a sign [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sign id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sign data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "Sign",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.SignUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/student_activities": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of student_activities if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StudentActivities"
                ],
                "summary": "Post student_activities to database [OK]",
                "parameters": [
                    {
                        "description": "New student_activities data",
                        "name": "StudentActivity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.StudentActivityInsertData"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted data",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.StudentActivityInsertData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/student_activities/all/{activity-id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a student_activity if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StudentActivities"
                ],
                "summary": "Get a student_activity [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Activity id",
                        "name": "activity-id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.StudentActivityResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/student_activities/{student-id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a student_activity if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StudentActivities"
                ],
                "summary": "Get a student_activity [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student id",
                        "name": "student-id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.StudentActivityResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/student_activities/{student-id}/{activity-id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StudentActivities"
                ],
                "summary": "Delete a student_activity [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student id",
                        "name": "student-id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Activity id",
                        "name": "activity-id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StudentActivities"
                ],
                "summary": "Update a student_activity [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "StudentActivity id",
                        "name": "student-id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "StudentActivity id",
                        "name": "activity-id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "StudentActivity data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "StudentActivity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.StudentActivityUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/students": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of students by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Get a list of students [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Student name for searching",
                        "name": "search-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Student name for searching",
                        "name": "sort-field",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Student name for searching",
                        "name": "sort-option",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "14",
                        "name": "year",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.StudentResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Post a student to database [OK]",
                "parameters": [
                    {
                        "description": "New student data",
                        "name": "Student",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.StudentInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Update student status [OK]",
                "parameters": [
                    {
                        "description": "Student data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "Student",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.StudentUpdateStatusData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/students/drl/{year}/{semester}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This API will return student DRL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Get student DRL",
                "parameters": [
                    {
                        "type": "string",
                        "example": "21-22",
                        "description": "School Year",
                        "name": "year",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "School Semester",
                        "name": "semester",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Student ID",
                        "name": "student-id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.GetDRLResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError500"
                        }
                    }
                }
            }
        },
        "/students/full_course_drl/{year}/{semester}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This API will return student DRL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Get student DRL",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student ID",
                        "name": "student-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "14",
                        "name": "year",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.FullDRLResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError500"
                        }
                    }
                }
            }
        },
        "/students/many": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Post a student to database [OK]",
                "parameters": [
                    {
                        "description": "New student data",
                        "name": "Student",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.StudentInsertData"
                            }
                        }
                    },
                    {
                        "type": "boolean",
                        "description": "Default = true",
                        "name": "override",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Delete students [OK]",
                "parameters": [
                    {
                        "description": "STUDENT ID TO DELETE",
                        "name": "Student",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/students/student-id/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a student if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Get a student by studentID [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.StudentResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/students/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a student if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Get a student [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.StudentResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Delete a student [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Update a student [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Student data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "Student",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.StudentUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/units": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of units by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Units"
                ],
                "summary": "Get a list of units [OK]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.UnitResponseData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a id if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Units"
                ],
                "summary": "Post a unit to database [OK]",
                "parameters": [
                    {
                        "description": "New unit data",
                        "name": "Unit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.UnitInsertData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inserted Unit ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/units/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a unit if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Units"
                ],
                "summary": "Get a unit [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unit id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.UnitResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Units"
                ],
                "summary": "Delete a unit [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unit id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Units"
                ],
                "summary": "Update a unit [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unit id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Unit data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "Unit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.UnitUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return a list of users by giving a filter. A filter can be formed based on the data columns of a table. For example ?num_staff=10\u0026name=\"Trạm cân 10\"\u0026deleted=true. You can also search for more values for a field, for example ?num_staff=10\u0026num_staff=9.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a list of users [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role filter",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Deleted Filter",
                        "name": "deleted",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Student name for searching",
                        "name": "sort-field",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Student name for searching",
                        "name": "major",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Student name for searching",
                        "name": "sort-option",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.GetAllUserDataResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "User register [OK]",
                "parameters": [
                    {
                        "description": "Register information",
                        "name": "Info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.Register"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.Register"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/users/change-password": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Change user password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Change user password [OK]",
                "parameters": [
                    {
                        "description": "Change password data",
                        "name": "ChangePassData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.ChangePassData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.UserDataResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/users/info": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user information [OK]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.UserDataResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "User login with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "User login [OK]",
                "parameters": [
                    {
                        "description": "Login information",
                        "name": "Info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError500"
                        }
                    }
                }
            }
        },
        "/users/many": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Post many users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Post many users [OK]",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "Info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.Register"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of inserted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/users/reset_num_certificates": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Reset num_certificates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Reset num_certificates [OK]",
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/users/reset_num_complains": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Reset num_certificates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Reset num_certificates [OK]",
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns deleted rows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete an user [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of deleted rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the number of rows updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update a user [OK]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User data to update. We can update all fields and omit fields that don't need to be updated, the API only updates those fields present in the object.",
                        "name": "Good",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.UserUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The number of updated rows",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        },
        "/users/{id}/change-password": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Reset user password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Reset user password [OK]",
                "parameters": [
                    {
                        "description": "Change password data",
                        "name": "ChangePassData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.ResetPassData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.UserDataResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError400"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "database.AchievementInsertData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "Không"
                }
            }
        },
        "database.AchievementResponseData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "Không"
                }
            }
        },
        "database.AchievementUpdateData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "Không"
                }
            }
        },
        "database.ActivityConfirmData": {
            "type": "object",
            "properties": {
                "confirm": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "database.ActivityImportDeadlineInsertData": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                }
            }
        },
        "database.ActivityImportDeadlineResponseData": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                }
            }
        },
        "database.ActivityImportDeadlineUpdateData": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                }
            }
        },
        "database.ActivityInsertData": {
            "type": "object",
            "properties": {
                "category_group_code": {
                    "type": "string",
                    "example": "I.a"
                },
                "confirm": {
                    "type": "boolean",
                    "example": false
                },
                "description": {
                    "type": "string",
                    "example": "Mô tả"
                },
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                },
                "name": {
                    "type": "string",
                    "example": "Sinh viên với pháp luật"
                },
                "organization_id": {
                    "type": "string",
                    "example": "Hội sinh viên"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                }
            }
        },
        "database.ActivityPSQL": {
            "type": "object",
            "properties": {
                "category_group_code": {
                    "type": "string",
                    "example": "I.a"
                },
                "confirm": {
                    "type": "boolean",
                    "example": false
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "deleted_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "deleter": {
                    "type": "string",
                    "example": "b30d54bf-9d9c-4220-a6a4-2f4bbaa99b94"
                },
                "description": {
                    "type": "string",
                    "example": "Mô tả"
                },
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "description": "CategoryGroup   CategoryGroup ` + "`" + `json:\"-\" swaggerignore:\"true\"` + "`" + `",
                    "type": "string",
                    "example": "Sinh viên với pháp luật"
                },
                "organization_id": {
                    "type": "string",
                    "example": "Hội sinh viên"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "user_id": {
                    "type": "string",
                    "example": "b30d54bf-9d9c-4220-a6a4-2f4bbaa99b94"
                }
            }
        },
        "database.ActivityResponseData": {
            "type": "object",
            "properties": {
                "category_group_code": {
                    "type": "string",
                    "example": "I.a"
                },
                "category_group_id": {
                    "type": "string"
                },
                "confirm": {
                    "type": "boolean",
                    "example": false
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "deleted_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "deleter": {
                    "type": "string",
                    "example": "b30d54bf-9d9c-4220-a6a4-2f4bbaa99b94"
                },
                "deleter_name": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "example": "Mô tả"
                },
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "description": "CategoryGroup   CategoryGroup ` + "`" + `json:\"-\" swaggerignore:\"true\"` + "`" + `",
                    "type": "string",
                    "example": "Sinh viên với pháp luật"
                },
                "organization_id": {
                    "type": "string",
                    "example": "Hội sinh viên"
                },
                "point_frame_id": {
                    "type": "string"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                },
                "unit": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "user_id": {
                    "type": "string",
                    "example": "b30d54bf-9d9c-4220-a6a4-2f4bbaa99b94"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "database.ActivityUpdateData": {
            "type": "object",
            "properties": {
                "category_group_code": {
                    "type": "string",
                    "example": "I.a"
                },
                "confirm": {
                    "type": "boolean",
                    "example": false
                },
                "deleter": {
                    "type": "string",
                    "example": "b30d54bf-9d9c-4220-a6a4-2f4bbaa99b94"
                },
                "description": {
                    "type": "string",
                    "example": "Mô tả"
                },
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                },
                "name": {
                    "description": "CategoryGroup   CategoryGroup ` + "`" + `json:\"-\" swaggerignore:\"true\"` + "`" + `",
                    "type": "string",
                    "example": "Sinh viên với pháp luật"
                },
                "organization_id": {
                    "type": "string",
                    "example": "Hội sinh viên"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                },
                "user_id": {
                    "type": "string",
                    "example": "b30d54bf-9d9c-4220-a6a4-2f4bbaa99b94"
                }
            }
        },
        "database.AwardInsertData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "Không"
                }
            }
        },
        "database.AwardResponseData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "Không"
                }
            }
        },
        "database.AwardUpdateData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "Không"
                }
            }
        },
        "database.CaculateDRLData": {
            "type": "object",
            "properties": {
                "mark": {
                    "description": "CategoryGroup CategoryGroup ` + "`" + `json:\"category_group\"` + "`" + `\nCategory      Category      ` + "`" + `json:\"category\"` + "`" + `",
                    "type": "integer"
                },
                "point_frame": {
                    "$ref": "#/definitions/database.PointFramePSQL"
                }
            }
        },
        "database.CategoryGroupCopyData": {
            "type": "object",
            "properties": {
                "To": {
                    "$ref": "#/definitions/database.SemesterSchoolYear"
                },
                "from": {
                    "$ref": "#/definitions/database.SemesterSchoolYear"
                }
            }
        },
        "database.CategoryGroupCopyResData": {
            "type": "object",
            "properties": {
                "num_category": {
                    "type": "integer"
                },
                "num_category_group": {
                    "type": "integer"
                },
                "num_point_frame": {
                    "type": "integer"
                },
                "num_rating": {
                    "type": "integer"
                }
            }
        },
        "database.CategoryGroupInsertData": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "I.a"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "Ý thức tham gia học tập"
                },
                "point_frame_id": {
                    "type": "string"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                }
            }
        },
        "database.CategoryGroupResponseData": {
            "type": "object",
            "properties": {
                "categories": {
                    "$ref": "#/definitions/types.JsonPsql"
                },
                "code": {
                    "type": "string",
                    "example": "I.a"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "Ý thức tham gia học tập"
                },
                "point_frame_id": {
                    "type": "string"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                }
            }
        },
        "database.CategoryGroupUpdateData": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "I.a"
                },
                "name": {
                    "type": "string",
                    "example": "Ý thức tham gia học tập"
                },
                "point_frame_id": {
                    "type": "string"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                }
            }
        },
        "database.CategoryInsertData": {
            "type": "object",
            "properties": {
                "achievement_id": {
                    "type": "string",
                    "example": "Không"
                },
                "award_id": {
                    "type": "string",
                    "example": "Không"
                },
                "category_group_id": {
                    "type": "string",
                    "example": "I.a"
                },
                "content": {
                    "description": "STU có STU không",
                    "type": "string",
                    "example": "Đi học đầy đủ, đúng giờ, nghiêm túc, không bỏ tiết"
                },
                "max_point": {
                    "type": "integer",
                    "example": -1
                },
                "note": {
                    "type": "string",
                    "example": "Ghi chú"
                },
                "point": {
                    "type": "integer",
                    "example": 15
                },
                "role": {
                    "type": "string",
                    "example": "BTC"
                }
            }
        },
        "database.CategoryResponseData": {
            "type": "object",
            "properties": {
                "achievement_id": {
                    "type": "string",
                    "example": "Không"
                },
                "award_id": {
                    "type": "string",
                    "example": "Không"
                },
                "category_group_id": {
                    "type": "string",
                    "example": "I.a"
                },
                "content": {
                    "description": "STU có STU không",
                    "type": "string",
                    "example": "Đi học đầy đủ, đúng giờ, nghiêm túc, không bỏ tiết"
                },
                "id": {
                    "type": "string"
                },
                "max_point": {
                    "type": "integer",
                    "example": -1
                },
                "note": {
                    "type": "string",
                    "example": "Ghi chú"
                },
                "point": {
                    "type": "integer",
                    "example": 15
                },
                "role": {
                    "type": "string",
                    "example": "BTC"
                }
            }
        },
        "database.CategoryUpdateData": {
            "type": "object",
            "properties": {
                "achievement_id": {
                    "type": "string",
                    "example": "Không"
                },
                "award_id": {
                    "type": "string",
                    "example": "Không"
                },
                "category_group_id": {
                    "type": "string",
                    "example": "I.a"
                },
                "content": {
                    "description": "STU có STU không",
                    "type": "string",
                    "example": "Đi học đầy đủ, đúng giờ, nghiêm túc, không bỏ tiết"
                },
                "max_point": {
                    "type": "integer",
                    "example": -1
                },
                "note": {
                    "type": "string",
                    "example": "Ghi chú"
                },
                "point": {
                    "type": "integer",
                    "example": 15
                },
                "role": {
                    "type": "string",
                    "example": "BTC"
                }
            }
        },
        "database.CertificateInsertData": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-11-15T08:15:52.471Z"
                },
                "mssv": {
                    "type": "string",
                    "example": "22110175"
                },
                "quantity": {
                    "type": "integer",
                    "example": 1
                },
                "reception_method": {
                    "type": "string",
                    "example": "Trực tuyến qua mail"
                },
                "school_year_id": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "20-21"
                    ]
                },
                "semester": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "2"
                    ]
                },
                "student_id": {
                    "type": "string"
                }
            }
        },
        "database.CertificateResData": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "number": {
                    "type": "integer"
                },
                "student_id": {
                    "type": "string"
                },
                "student_major": {
                    "type": "string"
                },
                "student_name": {
                    "type": "string"
                }
            }
        },
        "database.CertificateResponseData": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "deleted_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "deletion_reason": {
                    "type": "string",
                    "example": "Nhầm lẫn"
                },
                "exported_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mssv": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "Nguyễn Đăng An"
                },
                "number": {
                    "type": "integer",
                    "example": 1
                },
                "quantity": {
                    "type": "integer",
                    "example": 1
                },
                "reception_method": {
                    "type": "string",
                    "example": "Trực tuyến qua mail"
                },
                "school_year_id": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "20-21"
                    ]
                },
                "semester": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "2"
                    ]
                },
                "status": {
                    "type": "string"
                },
                "student_birthday": {
                    "type": "string"
                },
                "student_id": {
                    "type": "string"
                },
                "student_major": {
                    "type": "string"
                },
                "type": {
                    "description": "'all' or 'custom'",
                    "type": "string",
                    "example": "all"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                }
            }
        },
        "database.CertificateUpdateData": {
            "type": "object",
            "properties": {
                "deletion_reason": {
                    "type": "string",
                    "example": "Nhầm lẫn"
                },
                "exported_at": {
                    "type": "string"
                },
                "number": {
                    "type": "integer",
                    "example": 1
                },
                "quantity": {
                    "type": "integer",
                    "example": 1
                },
                "reception_method": {
                    "type": "string",
                    "example": "Trực tuyến qua mail"
                },
                "school_year_id": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "20-21"
                    ]
                },
                "semester": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "2"
                    ]
                },
                "status": {
                    "type": "string"
                },
                "student_id": {
                    "type": "string",
                    "example": "b30d54bf-9d9c-4220-a6a4-2f4bbaa99b94"
                },
                "type": {
                    "description": "'all' or 'custom'",
                    "type": "string",
                    "example": "all"
                }
            }
        },
        "database.ChangePassData": {
            "type": "object",
            "properties": {
                "new_password": {
                    "type": "string",
                    "example": "456"
                },
                "old_password": {
                    "type": "string",
                    "example": "123"
                }
            }
        },
        "database.ComplainInsertData": {
            "type": "object",
            "properties": {
                "complain_category": {
                    "type": "object"
                },
                "content": {
                    "type": "string",
                    "example": "Điểm bị chênh lệch"
                },
                "owner": {
                    "type": "string",
                    "example": "b30d54bf-9d9c-4220-a6a4-2f4bbaa99b94"
                },
                "proofs": {
                    "type": "string",
                    "example": "http://localhost:4001/docs/index.html#/Complains/post_complains"
                },
                "review_category": {
                    "type": "object"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                }
            }
        },
        "database.ComplainResponseData": {
            "type": "object",
            "properties": {
                "approve": {
                    "type": "boolean"
                },
                "complain_category": {
                    "type": "object"
                },
                "content": {
                    "type": "string",
                    "example": "Điểm bị chênh lệch"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "deleted_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "id": {
                    "type": "string"
                },
                "officer_response": {
                    "type": "string"
                },
                "owner": {
                    "type": "string",
                    "example": "b30d54bf-9d9c-4220-a6a4-2f4bbaa99b94"
                },
                "proofs": {
                    "type": "string",
                    "example": "http://localhost:4001/docs/index.html#/Complains/post_complains"
                },
                "response": {
                    "type": "string"
                },
                "review_category": {
                    "type": "object"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                },
                "status": {
                    "type": "string"
                },
                "student": {
                    "$ref": "#/definitions/database.StudentInfo"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "user_id": {
                    "type": "string",
                    "example": "b30d54bf-9d9c-4220-a6a4-2f4bbaa99b94"
                }
            }
        },
        "database.ComplainResponseInsertData": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string"
                }
            }
        },
        "database.ComplainResponseResponseData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "database.ComplainResponseUpdateData": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string"
                }
            }
        },
        "database.ComplainTimeInsertData": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                }
            }
        },
        "database.ComplainTimeResponseData": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "deleted_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                },
                "id": {
                    "type": "string"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                }
            }
        },
        "database.ComplainTimeUpdateData": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.999999Z"
                }
            }
        },
        "database.ComplainUpdateData": {
            "type": "object",
            "properties": {
                "approve": {
                    "type": "boolean"
                },
                "complain_category": {
                    "type": "object"
                },
                "content": {
                    "type": "string",
                    "example": "Điểm bị chênh lệch"
                },
                "officer_response": {
                    "type": "string"
                },
                "owner": {
                    "type": "string",
                    "example": "b30d54bf-9d9c-4220-a6a4-2f4bbaa99b94"
                },
                "proofs": {
                    "type": "string",
                    "example": "http://localhost:4001/docs/index.html#/Complains/post_complains"
                },
                "response": {
                    "type": "string"
                },
                "review_category": {
                    "type": "object"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                },
                "status": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string",
                    "example": "b30d54bf-9d9c-4220-a6a4-2f4bbaa99b94"
                }
            }
        },
        "database.DeletionReason": {
            "type": "object",
            "properties": {
                "deletion_reason": {
                    "type": "string",
                    "example": "Nhầm lẫn"
                }
            }
        },
        "database.FullDRLResponseData": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.GetFullDRLResponseData"
                    }
                },
                "grade": {
                    "type": "string"
                },
                "mark": {
                    "type": "integer"
                }
            }
        },
        "database.GetAllUserDataResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "ndan.itus@gmail.com"
                },
                "grant_role": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "abc",
                        "xyz"
                    ]
                },
                "id": {
                    "type": "string"
                },
                "major": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "Nguyễn Đăng An"
                },
                "num_certificates": {
                    "type": "integer"
                },
                "num_complains": {
                    "type": "integer"
                },
                "officer_id": {
                    "type": "string",
                    "example": "4232"
                },
                "password": {
                    "type": "string",
                    "example": "123"
                },
                "phone": {
                    "type": "string",
                    "example": "0379823839"
                },
                "position": {
                    "type": "string"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "school": {
                    "type": "string",
                    "example": "stu"
                },
                "student_id": {
                    "type": "string",
                    "example": "14120234"
                },
                "unit_id": {
                    "type": "string",
                    "example": "Hội sinh viên"
                },
                "username": {
                    "type": "string",
                    "example": "ndan.itus@gmail.com"
                }
            }
        },
        "database.GetDRLResponseData": {
            "type": "object",
            "properties": {
                "activity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.StudentActivityData"
                    }
                },
                "calculate_drl_data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.CaculateDRLData"
                    }
                },
                "rating": {
                    "type": "string"
                },
                "total_mark": {
                    "type": "integer"
                }
            }
        },
        "database.GetFullDRLResponseData": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/database.GetDRLResponseData"
                },
                "grade": {
                    "type": "string",
                    "example": "2"
                },
                "mark": {
                    "type": "integer",
                    "example": 2
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                }
            }
        },
        "database.Login": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "123"
                },
                "username": {
                    "type": "string",
                    "example": "ndan.itus@gmail.com"
                }
            }
        },
        "database.LoginResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/database.UserDataResponse"
                },
                "expire": {
                    "type": "string",
                    "example": "2005-08-15T15:52:01+00:00"
                },
                "token": {
                    "type": "string",
                    "example": "iuniu32neui3rn38fh784e5yn78f5r57R\u0026FGU*^TU?;.'grteuiHIUN98"
                }
            }
        },
        "database.MajorInsertData": {
            "type": "object",
            "properties": {
                "major": {
                    "type": "string"
                }
            }
        },
        "database.MajorResponseData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "major": {
                    "type": "string"
                }
            }
        },
        "database.MajorUpdateData": {
            "type": "object",
            "properties": {
                "major": {
                    "type": "string"
                }
            }
        },
        "database.OrganizationInsertData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "Cấp khoa"
                }
            }
        },
        "database.OrganizationResponseData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "Cấp khoa"
                }
            }
        },
        "database.OrganizationUpdateData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "Cấp khoa"
                }
            }
        },
        "database.PointFrameInsertData": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "I"
                },
                "deleted_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "description": {
                    "type": "string",
                    "example": "Mô tả"
                },
                "max_point": {
                    "type": "integer",
                    "example": 30
                },
                "min_point": {
                    "type": "integer",
                    "example": 10
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                }
            }
        },
        "database.PointFramePSQL": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "I"
                },
                "deleted_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "description": {
                    "type": "string",
                    "example": "Mô tả"
                },
                "id": {
                    "type": "string"
                },
                "max_point": {
                    "type": "integer",
                    "example": 30
                },
                "min_point": {
                    "type": "integer",
                    "example": 10
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                }
            }
        },
        "database.PointFrameResponseData": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "I"
                },
                "deleted_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "description": {
                    "type": "string",
                    "example": "Mô tả"
                },
                "id": {
                    "type": "string"
                },
                "max_point": {
                    "type": "integer",
                    "example": 30
                },
                "min_point": {
                    "type": "integer",
                    "example": 10
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                }
            }
        },
        "database.PointFrameUpdateData": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "I"
                },
                "deleted_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "description": {
                    "type": "string",
                    "example": "Mô tả"
                },
                "max_point": {
                    "type": "integer",
                    "example": 30
                },
                "min_point": {
                    "type": "integer",
                    "example": 10
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                }
            }
        },
        "database.RatingInsertData": {
            "type": "object",
            "properties": {
                "max_point": {
                    "type": "integer",
                    "example": 20
                },
                "min_point": {
                    "type": "integer",
                    "example": 5
                },
                "rating": {
                    "type": "string",
                    "example": "Giỏi"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "1"
                }
            }
        },
        "database.RatingResponseData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "max_point": {
                    "type": "integer",
                    "example": 20
                },
                "min_point": {
                    "type": "integer",
                    "example": 5
                },
                "rating": {
                    "type": "string",
                    "example": "Giỏi"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "1"
                }
            }
        },
        "database.RatingUpdateData": {
            "type": "object",
            "properties": {
                "max_point": {
                    "type": "integer",
                    "example": 20
                },
                "min_point": {
                    "type": "integer",
                    "example": 5
                },
                "rating": {
                    "type": "string",
                    "example": "Giỏi"
                },
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "1"
                }
            }
        },
        "database.Register": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "ndan.itus@gmail.com"
                },
                "grant_role": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "abc",
                        "xyz"
                    ]
                },
                "name": {
                    "type": "string",
                    "example": "Nguyễn Đăng An"
                },
                "officer_id": {
                    "type": "string",
                    "example": "4232"
                },
                "password": {
                    "type": "string",
                    "example": "123"
                },
                "phone": {
                    "type": "string",
                    "example": "0379823839"
                },
                "position": {
                    "type": "string"
                },
                "role": {
                    "description": "\"officer\" or \"student\" (default)",
                    "type": "string",
                    "example": "officer"
                },
                "student_id": {
                    "type": "string",
                    "example": "14120234"
                },
                "unit_id": {
                    "type": "string",
                    "example": "Hội sinh viên"
                }
            }
        },
        "database.ResetPassData": {
            "type": "object",
            "properties": {
                "new_password": {
                    "type": "string",
                    "example": "456"
                }
            }
        },
        "database.RoleInsertData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "database.RoleResponseData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "database.RoleUpdateData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "database.SampleComplainResponseInsertData": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                }
            }
        },
        "database.SampleComplainResponseResponseData": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "database.SampleComplainResponseUpdateData": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                }
            }
        },
        "database.SchoolYearInsertData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "database.SchoolYearResponseData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "database.SchoolYearUpdateData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "database.SemesterSchoolYear": {
            "type": "object",
            "properties": {
                "school_year_id": {
                    "type": "string",
                    "example": "20-21"
                },
                "semester": {
                    "type": "string",
                    "example": "2"
                }
            }
        },
        "database.SignInsertData": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "database.SignResponseData": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "deleted_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                }
            }
        },
        "database.SignUpdateData": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "database.StudentActivityData": {
            "type": "object",
            "properties": {
                "activity": {
                    "$ref": "#/definitions/database.ActivityPSQL"
                },
                "mark": {
                    "type": "integer"
                },
                "student_activity": {
                    "$ref": "#/definitions/database.StudentActivityPSQL"
                }
            }
        },
        "database.StudentActivityInsertData": {
            "type": "object",
            "properties": {
                "achievement": {
                    "type": "string",
                    "example": "Thành tích"
                },
                "activity_id": {
                    "type": "string",
                    "example": "dd0f4638-07c4-4f9d-a8bb-1f80c4bfbb08"
                },
                "award": {
                    "type": "string",
                    "example": "Khen thưởng"
                },
                "mssv": {
                    "type": "string",
                    "example": "1511002"
                },
                "note": {
                    "type": "string",
                    "example": "Ghi chú"
                },
                "role": {
                    "description": "Mark        int    ` + "`" + `json:\"mark\" example:\"5\"` + "`" + `",
                    "type": "string",
                    "example": "BTC"
                },
                "student_id": {
                    "type": "string",
                    "example": "b30d54bf-9d9c-4220-a6a4-2f4bbaa99b94"
                },
                "student_name": {
                    "type": "string",
                    "example": "1412023"
                }
            }
        },
        "database.StudentActivityPSQL": {
            "type": "object",
            "properties": {
                "achievement": {
                    "type": "string",
                    "example": "Thành tích"
                },
                "activity_id": {
                    "type": "string",
                    "example": "dd0f4638-07c4-4f9d-a8bb-1f80c4bfbb08"
                },
                "award": {
                    "type": "string",
                    "example": "Khen thưởng"
                },
                "note": {
                    "type": "string",
                    "example": "Ghi chú"
                },
                "role": {
                    "description": "Mark        int    ` + "`" + `json:\"mark\" example:\"5\"` + "`" + `",
                    "type": "string",
                    "example": "BTC"
                },
                "student_id": {
                    "type": "string",
                    "example": "b30d54bf-9d9c-4220-a6a4-2f4bbaa99b94"
                }
            }
        },
        "database.StudentActivityResponseData": {
            "type": "object",
            "properties": {
                "mark": {
                    "type": "integer"
                },
                "student_activity": {
                    "$ref": "#/definitions/database.StudentActivityPSQL"
                },
                "student_info": {
                    "$ref": "#/definitions/database.StudentInfo"
                }
            }
        },
        "database.StudentActivityUpdateData": {
            "type": "object",
            "properties": {
                "achievement": {
                    "type": "string",
                    "example": "Thành tích"
                },
                "activity_id": {
                    "type": "string"
                },
                "award": {
                    "type": "string",
                    "example": "Khen thưởng"
                },
                "note": {
                    "type": "string",
                    "example": "Ghi chú"
                },
                "role": {
                    "description": "Mark        int    ` + "`" + `json:\"mark\" example:\"5\"` + "`" + `",
                    "type": "string",
                    "example": "BTC"
                },
                "student_id": {
                    "type": "string"
                }
            }
        },
        "database.StudentInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Nguyễn Đăng An"
                },
                "student_id": {
                    "type": "string",
                    "example": "1412023"
                }
            }
        },
        "database.StudentInsertData": {
            "type": "object",
            "properties": {
                "class": {
                    "type": "string",
                    "example": "D20_CDTU01"
                },
                "date_of_birth": {
                    "type": "string",
                    "example": "21/02/1996"
                },
                "date_of_id_card": {
                    "type": "string",
                    "example": "06/02/2012"
                },
                "education_level": {
                    "type": "string",
                    "example": "Cử nhân"
                },
                "education_type": {
                    "type": "string",
                    "example": "Chính quy"
                },
                "email": {
                    "type": "string",
                    "example": "ndan.itus@gmail.com"
                },
                "gender": {
                    "type": "string",
                    "example": "Nam"
                },
                "id_card_number": {
                    "type": "string"
                },
                "major": {
                    "type": "string",
                    "example": "Toán học"
                },
                "name": {
                    "type": "string",
                    "example": "Nguyễn Đăng An"
                },
                "note": {
                    "type": "string",
                    "example": "Nam"
                },
                "other_data": {
                    "type": "object"
                },
                "phone_number": {
                    "type": "string",
                    "example": "0379823839"
                },
                "school_year": {
                    "type": "string",
                    "example": "20-21"
                },
                "status": {
                    "type": "string",
                    "example": "Đang học"
                },
                "student_id": {
                    "type": "string"
                }
            }
        },
        "database.StudentResponseData": {
            "type": "object",
            "properties": {
                "class": {
                    "type": "string",
                    "example": "D20_CDTU01"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "date_of_birth": {
                    "type": "string",
                    "example": "21/02/1996"
                },
                "date_of_id_card": {
                    "type": "string",
                    "example": "06/02/2012"
                },
                "deleted_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                },
                "education_level": {
                    "type": "string",
                    "example": "Cử nhân"
                },
                "education_type": {
                    "type": "string",
                    "example": "Chính quy"
                },
                "email": {
                    "type": "string",
                    "example": "ndan.itus@gmail.com"
                },
                "gender": {
                    "type": "string",
                    "example": "Nam"
                },
                "id": {
                    "type": "string"
                },
                "id_card_number": {
                    "type": "string"
                },
                "major": {
                    "type": "string",
                    "example": "Toán học"
                },
                "name": {
                    "type": "string",
                    "example": "Nguyễn Đăng An"
                },
                "note": {
                    "type": "string",
                    "example": "Nam"
                },
                "other_data": {
                    "type": "object"
                },
                "phone_number": {
                    "type": "string",
                    "example": "0379823839"
                },
                "school_year": {
                    "type": "string",
                    "example": "20-21"
                },
                "status": {
                    "type": "string",
                    "example": "Đang học"
                },
                "student_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-08-17T15:40:58.131023+07:00"
                }
            }
        },
        "database.StudentUpdateData": {
            "type": "object",
            "properties": {
                "class": {
                    "type": "string",
                    "example": "D20_CDTU01"
                },
                "date_of_birth": {
                    "type": "string",
                    "example": "21/02/1996"
                },
                "date_of_id_card": {
                    "type": "string",
                    "example": "06/02/2012"
                },
                "education_level": {
                    "type": "string",
                    "example": "Cử nhân"
                },
                "education_type": {
                    "type": "string",
                    "example": "Chính quy"
                },
                "email": {
                    "type": "string",
                    "example": "ndan.itus@gmail.com"
                },
                "gender": {
                    "type": "string",
                    "example": "Nam"
                },
                "id_card_number": {
                    "type": "string"
                },
                "major": {
                    "type": "string",
                    "example": "Toán học"
                },
                "name": {
                    "type": "string",
                    "example": "Nguyễn Đăng An"
                },
                "note": {
                    "type": "string",
                    "example": "Nam"
                },
                "other_data": {
                    "type": "object"
                },
                "phone_number": {
                    "type": "string",
                    "example": "0379823839"
                },
                "school_year": {
                    "type": "string",
                    "example": "20-21"
                },
                "status": {
                    "type": "string",
                    "example": "Đang học"
                },
                "student_id": {
                    "type": "string"
                }
            }
        },
        "database.StudentUpdateStatusData": {
            "type": "object",
            "properties": {
                "graduated_student_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "studying_student_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "database.UnitInsertData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "Hội sinh viên"
                }
            }
        },
        "database.UnitResponseData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "Hội sinh viên"
                }
            }
        },
        "database.UnitUpdateData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "Hội sinh viên"
                }
            }
        },
        "database.UserDataResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "ndan.itus@gmail.com"
                },
                "grant_role": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "abc",
                        "xyz"
                    ]
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "Nguyễn Đăng An"
                },
                "num_certificates": {
                    "type": "integer"
                },
                "num_complains": {
                    "type": "integer"
                },
                "officer_id": {
                    "type": "string",
                    "example": "4232"
                },
                "phone": {
                    "type": "string",
                    "example": "0379823839"
                },
                "position": {
                    "type": "string"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "school": {
                    "type": "string",
                    "example": "stu"
                },
                "student_id": {
                    "type": "string",
                    "example": "14120234"
                },
                "unit_id": {
                    "type": "string",
                    "example": "Hội sinh viên"
                },
                "username": {
                    "type": "string",
                    "example": "ndan.itus@gmail.com"
                }
            }
        },
        "database.UserUpdateData": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "ndan.itus@gmail.com"
                },
                "grant_role": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "abc",
                        "xyz"
                    ]
                },
                "name": {
                    "type": "string",
                    "example": "Nguyễn Đăng An"
                },
                "officer_id": {
                    "type": "string",
                    "example": "4232"
                },
                "phone": {
                    "type": "string",
                    "example": "0379823839"
                },
                "position": {
                    "type": "string"
                },
                "restore": {
                    "type": "boolean"
                },
                "student_id": {
                    "type": "string",
                    "example": "14120234"
                },
                "unit_id": {
                    "type": "string",
                    "example": "Hội sinh viên"
                },
                "username": {
                    "type": "string",
                    "example": "ndan.itus@gmail.com"
                }
            }
        },
        "model.HTTPError400": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Status bad request"
                }
            }
        },
        "model.HTTPError500": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "types.JsonPsql": {
            "type": "object",
            "properties": {
                "val": {}
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJJRCI6ImM2NTRmNDA1LTdlMjYtNDI4ZS05OWQ0LWE5MDg4MmY5YWVjYSIsIk5hbWUiOiJwY3RzdmhjbXVzIiwiUm9sZSI6ImFkbWluIiwiU2Nob29sIjoiaGNtdXMiLCJleHAiOjE3MTg2MzkxMDQsIm9yaWdfaWF0IjoxNzAzMDg3MTA0fQ._oBOk8qaqyrVv42kFNdks32yfS_ZzxbVBmdZhT2JgXk",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "All APIs to interact with users",
            "name": "Users"
        },
        {
            "description": "All APIs to interact with activities",
            "name": "Activities"
        },
        {
            "description": "All APIs to interact with students",
            "name": "Students"
        },
        {
            "description": "All APIs to interact with categories",
            "name": "Categories"
        },
        {
            "description": "All APIs to interact with ratings",
            "name": "Ratings"
        },
        {
            "description": "All APIs to interact with category_groups",
            "name": "CategoryGroups"
        },
        {
            "description": "All APIs to interact with units",
            "name": "Units"
        },
        {
            "description": "All APIs to interact with awards",
            "name": "Awards"
        },
        {
            "description": "All APIs to interact with achievements",
            "name": "Achievements"
        },
        {
            "description": "All APIs to interact with school_years",
            "name": "SchoolYears"
        },
        {
            "description": "All APIs to interact with point_frames",
            "name": "PointFrames"
        },
        {
            "description": "All APIs to interact with student_activities",
            "name": "StudentActivities"
        },
        {
            "description": "All APIs to interact with activity_import_deadlines",
            "name": "ActivityImportDeadlines"
        },
        {
            "description": "All APIs to interact with certificates",
            "name": "Certificates"
        },
        {
            "description": "All APIs to interact with signs",
            "name": "Signs"
        },
        {
            "description": "All APIs to interact with roles",
            "name": "Roles"
        },
        {
            "description": "All APIs to interact with complains",
            "name": "Complains"
        },
        {
            "description": "All APIs to interact with complain_times",
            "name": "ComplainTimes"
        },
        {
            "description": "All APIs to interact with complain_responses",
            "name": "ComplainResponses"
        },
        {
            "description": "All APIs to interact with majors",
            "name": "Majors"
        },
        {
            "description": "All APIs to interact with sample_complain_responses",
            "name": "SampleComplainResponses"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "DRLVN API",
	Description:      "This is the DRLVN API Docs for using internally.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
